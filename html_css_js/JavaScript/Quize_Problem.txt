1. What's the output?

        function sayHi(){
            console.log(name);
            console.log(age);
            var name= 'lydia';
            let age=21;
        }
        sayHi();

        options:- A. lydia and undefined
                  B. lydia and reference error
                  C. reference error and 21
                  D. undefined and reference error

        correct ans-> D.


2. What' the output?

    function (var i=0; i<3 ; i++){
        setTimeout(()=>{console.log(i)},1)
    }

    function (let i=0; i<3 ; i++){
        setTimeout(()=>{console.log(i)},1)
    }

    options:- A. 0 1 2 and 0 1 2
              B. 0 1 2 and 3 3 3
              C. 3 3 3 and 0 1 2

    correct ans -> C.

    Explain : Because of the event queue in JavaScript, the setTimeout callback function is called after the loop has been executed. Since the variable i in the first loop was declared using the var keyword, this value was global. During the loop, we incremented the value of i by 1 each time, using the unary operator ++. By the time the setTimeout callback function was invoked, i was equal to 3 in the first example.

    In the second loop, the variable i was declared using the let keyword: variables declared with the let (and const) keyword are block-scoped (a block is anything between { }). During each iteration, i will have a new value, and each value is scoped inside the loop.


3. what's the output ?

    const shape={
        radius:10,
        diameter(){
            return this.radius * 2;
        },
        perimeter:()=>2 * Math.PI * this.radius
    };

    output: console.log(shape.diameter())
            console.log(shape.perimeter())

            options:- A. 20 and 62.83185307179586
                      B. 20 and NaN
                      C. 20 and 63
                      D. NaN and 63

            correct ans-> B.

4. which one is true?

    const bird={
        size:'small'
    };

    const mouse={
        name:'Mickey',
        small:true
    };

    output:  console.log(mouse.bird.size) -> undefined 
             console.log(mouse[bird['size']])-> true
             console.log(mouse[bird.size]) -> true


    options:- A. mouse.bird.size is not valid
              B. mouse[bird.size] is not valid
              C. mouse[bird["size"]] is not valid
              D. All of them are valid

    correct ans-> A.

    Explain : In JavaScript, all object keys are strings (unless it's a Symbol). Even though we might not type them as strings, they are always converted into strings under the hood.

    JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket [ and keeps going until it finds the closing bracket ]. Only then, it will evaluate the statement.

    mouse[bird.size]: First it evaluates bird.size, which is "small". mouse["small"] returns true

    However, with dot notation, this doesn't happen. mouse does not have a key called bird, which means that mouse.bird is undefined. Then, we ask for the size using dot notation: mouse.bird.size. Since mouse.bird is undefined, we're actually asking undefined.size. This isn't valid, and will throw an error similar to Cannot read property "size" of undefined.


5. what is the output?

    let a = 3;
    let b = new Number(3);
    let c = 3;

    console.log(a == b);
    console.log(a === b);
    console.log(a === b);

    options: A. true false true
             B. false false true
             C. true false false
             D. false false true

    correct ans-> C.

6. what is the output?

    class Chameleon{
        static colorChange(newColor){
            this.newColor=newColor;
            return this.newColor;
        }

        constructor ({newColor='green'} = {}){
            this.newColor=newColor;
        }
    }

    const freddie=new Chameleon({newColor:'purpule'});
    console.log(freddie.colorChange('orange'));